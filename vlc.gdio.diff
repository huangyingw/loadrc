diff --git a/error b/error
index 3cae4633..467ed7fa 100644
--- ./error
+++ ./error
@@ -61,3 +61,7 @@ E15: Invalid expression: l:changed_win_bufs
 Cought anything: Vim(cd):E472: Command failed
 
 [ncm2_go@yarp] TypeError: expected str, bytes or os.PathLike object, not NoneType
+
+Error detected while processing function CSCSearch[12]..GetEscapedResult:
+line   15:
+E33: No previous substitute regular expression
diff --git a/pythonrc/handle_vtt.py b/pythonrc/handle_vtt.py
new file mode 100755
index 00000000..e96be0cf
--- /dev/null
+++ ./pythonrc/handle_vtt.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+from os import path
+import datetime
+import re
+
+
+def parse_vtt_str(time_string):
+    r2 = re.findall(r"\d+:\d+:\d+(?=[^:]*-->)", time_string)
+    date_time = datetime.datetime.strptime(r2[0], "%H:%M:%S")
+    a_timedelta = date_time - datetime.datetime(1900, 1, 1)
+    seconds = a_timedelta.total_seconds()
+    return seconds
+
+
+def find_vtt_video(filename):
+    regex = r".+(?=\.en\.(vtt|srt)$)"
+    matches = re.finditer(regex, filename, re.MULTILINE)
+    for matchNum, match in enumerate(matches, start=1):
+        for postfix in ["mp4", "mkv", "webm"]:
+            targetFile = match.group() + "." + postfix
+            if path.exists(targetFile):
+                return targetFile
diff --git a/pythonrc/handle_vtt_test.py b/pythonrc/handle_vtt_test.py
new file mode 100644
index 00000000..23371749
--- /dev/null
+++ ./pythonrc/handle_vtt_test.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python3
+from handle_vtt import *
+import unittest
+
+
+class TestHandle_Vtt(unittest.TestCase):
+    def test_parse_vtt_str(self):
+        time_string = "00:00:08.690 --> 00:00:08.700 align:start position:0%"
+        start = parse_vtt_str(time_string)
+        self.assertEqual(start, 8.0)
+        time_string = "00:10:08.690 --> 00:00:08.700 align:start position:0%"
+        start = parse_vtt_str(time_string)
+        self.assertEqual(start, 608.0)
+
+    def test_find_vtt_video(self):
+        fileVar = "/Users/huangyingw/Dropbox/learning/AI/fast.ai/Intro_to_Machine_Learning_-_Lesson_1.en.vtt"
+        videoFile = find_vtt_video(fileVar)
+        self.assertEqual(videoFile, '/Users/huangyingw/Dropbox/learning/AI/fast.ai/Intro_to_Machine_Learning_-_Lesson_1.mkv')
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/pythonrc/vlc.py b/pythonrc/vlc.py
new file mode 100755
index 00000000..13a0cf4c
--- /dev/null
+++ ./pythonrc/vlc.py
@@ -0,0 +1,28 @@
+#!/usr/bin/env python3
+from handle_vtt import *
+from os import path
+import platform
+import subprocess
+import sys
+fileVar = sys.argv[1]
+lineVar = sys.argv[2]
+targetFile = path.dirname(fileVar) + '/' + lineVar
+
+
+def callvlc(targetFile, start=0):
+    if targetFile:
+        if platform.system() == 'Darwin':
+            if start == 0:
+                subprocess.check_call(['/Applications/VLC.app/Contents/MacOS/VLC', '-f', '--macosx-continue-playback=2', targetFile])
+            else:
+                subprocess.check_call(['/Applications/VLC.app/Contents/MacOS/VLC', '-f', '--macosx-continue-playback=2', '--start-time=' + str(start), targetFile])
+        else:
+            subprocess.check_call(['smplayer', '-fullscreen', targetFile])
+
+
+if path.exists(targetFile):
+    callvlc(targetFile)
+else:
+    start = parse_vtt_str(lineVar)
+    targetFile = find_vtt_video(fileVar)
+    callvlc(targetFile, start)
diff --git a/pythonrc/vlc.py.sh b/pythonrc/vlc.py.sh
new file mode 100755
index 00000000..0ca202b1
--- /dev/null
+++ ./pythonrc/vlc.py.sh
@@ -0,0 +1,7 @@
+#!/bin/zsh
+SCRIPT=$(realpath "$0")
+SCRIPTPATH=$(dirname "$SCRIPT")
+cd "$SCRIPTPATH"
+
+./vlc.py "/Users/huangyingw/Dropbox/learning/AI/fast.ai/fav.log" "Machine_Learning_1_-_Lesson_8.mkv"
+./vlc.py "/Users/huangyingw/Dropbox/learning/AI/fast.ai/Intro_to_Machine_Learning_-_Lesson_1.en.vtt" "00:11:12.620 --> 02:11:17.560"
diff --git a/vimrc/.vim/plugin/keymap.vim b/vimrc/.vim/plugin/keymap.vim
index 75de359f..2acf365e 100644
--- ./vimrc/.vim/plugin/keymap.vim
+++ ./vimrc/.vim/plugin/keymap.vim
@@ -92,7 +92,10 @@ function! PlayVideo()
     endif
 
     call asyncrun#stop('<bang>')
-    call asyncrun#run('<bang>', '', '~/loadrc/vishrc/vlc.sh ' . '"' . expand('%:p:h') . '/' . '"' .  getline('.'))
+    let line = getline('.')
+    let line = substitute(line, '^[^"]', '"' . line[0], '')
+    let line = substitute(line, '[^"]$', line[strlen(line) - 1] . '"', '')
+    call asyncrun#run('<bang>', '', '~/loadrc/pythonrc/vlc.py ' . '"' . expand("%:p") . '"' .  ' ' . line)
 endfunction
 
 function! VDebug()
