diff --git a/dockerrc/dps.sh b/dockerrc/dps.sh
index 6c5385fa..be034a79 100755
--- ./dockerrc/dps.sh
+++ ./dockerrc/dps.sh
@@ -1,2 +1,2 @@
 #!/bin/zsh
-docker ps > dps.findresult
+docker ps
diff --git a/gitrc/.globalgitignore b/gitrc/.globalgitignore
index a9a4f4a0..3a3f3dd2 100755
--- ./gitrc/.globalgitignore
+++ ./gitrc/.globalgitignore
@@ -2,8 +2,7 @@
 *.bak
 *.bin
 *.diff
-!*.fix.gdio.diff
-!dev.gdio.diff
+!*.gdio.diff
 *.exe
 *.findresult
 *.fugitiveblame
diff --git a/gitrc/fsync.sh b/gitrc/fsync.sh
deleted file mode 100755
index 9222f503..00000000
--- ./gitrc/fsync.sh
+++ /dev/null
@@ -1,38 +0,0 @@
-#!/bin/zsh
-if [ -z "$1" ]
-then
-    TARGETEDIR="$pwd"
-else
-    TARGETEDIR="$1"
-fi
-RESULT="$TARGETEDIR"/fgs.findresult
-function rec_dir() {
-    if [[ $2 -gt 11 ]]
-    then
-        return
-    fi
-    for file in `ls -al $1`
-    do
-        if [ -d "$1/$file" ] && [ "$file" != ".." ] && [ "$file" != "." ]
-        then
-            if [ -d "$1/$file/.git" ]
-            then
-                cd "$1/$file"
-                if [ -n "$(git status --porcelain)" ]
-                then
-                    echo "$1/$file" >> "$RESULT"
-                else
-                    ~/loadrc/gitrc/gsync.sh
-                fi
-                cd - 1>/dev/null
-            else
-                if [ "$file" != ".git" ] && [ "$file" != ".." ] && [ "$file" != "." ]
-                then
-                    rec_dir "$1/$file" $(($2 + 1))
-                fi
-            fi
-        fi
-    done
-}
-rm "$RESULT"
-rec_dir "$TARGETEDIR" 0
diff --git a/gitrc/gbr.sh b/gitrc/gbr.sh
index 3307cc1e..450962ef 100755
--- ./gitrc/gbr.sh
+++ ./gitrc/gbr.sh
@@ -1,2 +1,2 @@
 #!/bin/zsh
-git branch | tee gbr.findresult 
+git branch
diff --git a/gitrc/gbra.sh b/gitrc/gbra.sh
index 3edd6ef5..e0af3850 100755
--- ./gitrc/gbra.sh
+++ ./gitrc/gbra.sh
@@ -1,2 +1,2 @@
 #!/bin/zsh
-git branch -a | tee gbra.findresult
+git branch -a
diff --git a/vimrc/.vim/bundle/python-mode b/vimrc/.vim/bundle/python-mode
index c2a1b140..40406e03 160000
--- ./vimrc/.vim/bundle/python-mode
+++ ./vimrc/.vim/bundle/python-mode
@@ -1 +1 @@
-Subproject commit c2a1b14045959245b4cc3beece1d87844dd07917
+Subproject commit 40406e03dd0fc91b906d3d566c318082c152c3ed
diff --git a/vimrc/.vim/plugin/common.vim b/vimrc/.vim/plugin/common.vim
index 87bbd96d..adddcfad 100644
--- ./vimrc/.vim/plugin/common.vim
+++ ./vimrc/.vim/plugin/common.vim
@@ -211,24 +211,22 @@ function! VsMax(fileName)
     call OpenOrSwitch(a:fileName, 'vs')
 endfunc
 
-function! RunShell(shell, ...)
-    let arg1 = (a:0 >= 1) ? a:1 : ''
-    let arg2 = (a:0 >= 2) ? a:2 : ''
-    let silent = substitute(system('git config vrun.silent'), '\n', '', '')
-    let async = substitute(system('git config vrun.async'), '\n', '', '')
-    let temp_log = arg2 . '.findresult'
-    let run_string = a:shell . ' ' . '"' .  arg1 . '"' .  ' ' . '2>&1 | tee' . ' ' . temp_log
-
-    if async ==? "true"
+function! RunShell(shell, param, output, async)
+    if &modified
+        echom 'Please check and save your file first!!!'
+        return 0
+    endif
+
+    let temp_log = output . '.findresult'
+    let run_string = a:shell . ' ' . '"' .  param . '"' .  ' ' . '2>&1 | tee' . ' ' . temp_log
+
+    if async ==? 'true'
         call asyncrun#run('<bang>', '', ' ' . run_string)
-    else
-        if silent ==? "true"
-            silent exec '!' . run_string
     else
         exec '!' . run_string
     endif
-    endif
-    silent exec '!cp' . ' ' . '"' .  temp_log . '"' . ' ' . '"' .  arg2 . '"'
+
+    silent exec '!cp' . ' ' . '"' .  temp_log . '"' . ' ' . '"' .  output . '"'
 endfunc
 
 function! Filter2Findresult()
diff --git a/vimrc/.vim/plugin/fugitive.vim b/vimrc/.vim/plugin/fugitive.vim
index f339827f..2cd6c070 100644
--- ./vimrc/.vim/plugin/fugitive.vim
+++ ./vimrc/.vim/plugin/fugitive.vim
@@ -10,7 +10,6 @@ command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Fcscop
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject FindDeleted :execute s:FindDeleted()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Fnotinuse :execute s:Fnotinuse()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Fr :execute s:Fr(<f-args>)
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Fsync :execute s:Fsync()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject G :execute s:G(<q-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Ga :execute s:Ga(<q-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gbib :execute s:Gbib()
@@ -37,10 +36,7 @@ command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gfix :
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gicb :execute s:Gicb()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gitk :execute s:Gitk(<f-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Glf :execute s:Glf()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Glg :execute s:Glg()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gmet :execute s:Gmet()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gpl :execute s:Gpl()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gps :execute s:Gps()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Grsh :execute s:Grsh(<q-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Grta :execute s:Grta(<f-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Grtu :execute s:Grtu()
@@ -49,11 +45,6 @@ command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gs :ex
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gsave :execute s:Gsave()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gshow :execute s:Gshow(<q-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gst :execute s:Gst()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gsti :execute s:Gsti()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gstl :execute s:Gstl()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gstlv :execute s:Gstlv()
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gstp :execute s:Gstp(<q-args>)
-command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gstv :execute s:Gstv(<q-args>)
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gsync :execute s:Gsync()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gtg :execute s:Gtg()
 command! -bang -bar -nargs=* -complete=customlist,fugitive#CompleteObject Gkd :execute s:Gkd(<f-args>)
@@ -163,27 +154,6 @@ function! s:Glf() abort
     call OpenOrSwitch('glf.findresult', 'vs')
 endfunction
 
-function! s:Glg() abort
-    let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/glg.sh'
-    call OpenOrSwitch('glg.findresult', 'vs')
-endfunction
-
-function! s:Gps() abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gps.sh 2>&1 | tee gps.findresult')
-endfunction
-
-function! s:Gstp(args, ...) abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gstp.sh ' . '"' .  a:args . '"')
-endfunction
-
-function! s:Gstv(args, ...) abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gstv.sh ' . '"' .  a:args . '"')
-endfunction
-
 function! s:Gcof(...) abort
     let worktree = Cd2Worktree()
     let b:relativePath = substitute(expand('%:p'), worktree . '/', "", "g")
@@ -192,58 +162,49 @@ function! s:Gcof(...) abort
     call OpenOrSwitch(expand('%:p') . '.bak', 'vs')
 endfunction
 
-function! s:Gpl() abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gpl.sh 2>&1 | tee gpl.findresult')
-endfunction
-
-function! s:Fsync() abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/fsync.sh 2>&1 | tee fsync.findresult')
-    call OpenOrSwitch('fsync.findresult', 'vs')
-endfunction
-
 function! s:Gbis() abort
     let worktree = Cd2Worktree()
-    exec '!~/loadrc/gitrc/gbis.sh'
+    call RunShell('~/loadrc/gitrc/gbis.sh', '', '', '')
 endfunction
 
 function! s:Gbidebug() abort
     let worktree = Cd2Worktree()
-    exec '!~/loadrc/gitrc/gbidebug.sh'
+    call RunShell('~/loadrc/gitrc/gbidebug.sh', '', '', '')
 endfunction
 
 function! s:Gbib() abort
     let worktree = Cd2Worktree()
-    exec '!~/loadrc/gitrc/gbib.sh'
+    call RunShell('~/loadrc/gitrc/gbib.sh', '', '', '')
 endfunction
 
 function! s:Gbig() abort
     let worktree = Cd2Worktree()
-    exec '!~/loadrc/gitrc/gbig.sh'
+    call RunShell('~/loadrc/gitrc/gbig.sh', '', '', '')
 endfunction
 
 function! s:Gbil() abort
     let worktree = Cd2Worktree()
-    exec '!~/loadrc/gitrc/gbil.sh'
+    call RunShell('~/loadrc/gitrc/gbil.sh', '', '', '')
     call OpenOrSwitch('gbil.log', 'vs')
 endfunction
 
 function! s:Gbr() abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/gbr.sh'
-    call OpenOrSwitch('gbr.findresult', 'vs')
+    let b:output = 'gbr.findresult'
+    call RunShell('~/loadrc/gitrc/gbr.sh', '', b:output, '')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:Gclean() abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/gclean.sh'
+    call RunShell('~/loadrc/gitrc/gclean.sh', '', '', '')
 endfunction
 
 function! s:Gbra() abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/gbra.sh'
-    call OpenOrSwitch('gbra.findresult', 'vs')
+    let b:output = 'gbra.findresult'
+    call RunShell('~/loadrc/gitrc/gbra.sh', '', b:output, '')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:Gs() abort
@@ -259,8 +220,9 @@ endfunction
 
 function! s:Gsync() abort
     let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gsync.sh 2>&1 | tee gsync.findresult')
-    call OpenOrSwitch('gsync.findresult', 'vs')
+    let b:output = 'gsync.findresult'
+    call RunShell('~/loadrc/gitrc/gsync.sh', '', b:output, 'true')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:Grta(...) abort
@@ -272,29 +234,14 @@ endfunction
 
 function! s:Grsh(args, ...) abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/grsh.sh ' . '"' .  a:args . '"'
-endfunction
-
-function! s:Gsti() abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gsti.sh')
-endfunction
-
-function! s:Gstl() abort
-    let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/gstl.sh'
-    call OpenOrSwitch('gstl.findresult', 'vs')
-endfunction
-
-function! s:Gstlv() abort
-    let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gstlv.sh')
+    call RunShell('~/loadrc/gitrc/grsh.sh', a:args, '', '')
 endfunction
 
 function! s:Gme2(args, ...) abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/gitrc/gme2.sh ' . '"' .  a:args . '" 2>&1 | tee gme2.findresult'
-    call OpenOrSwitch(worktree . '/' . 'gme2.findresult', 'vs')
+    let b:output = 'gme2.findresult'
+    call RunShell('~/loadrc/gitrc/gme2.sh', a:args, '', '')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:G(args, ...) abort
@@ -307,7 +254,8 @@ function! s:G(args, ...) abort
     endif
 
     let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/g.sh ' . '"' .  a:args . '" 2>&1 | tee g.findresult')
+    let b:output = 'g.findresult'
+    call RunShell('~/loadrc/gitrc/g.sh', a:args, b:output, '')
 
     if &diff
         call s:Gs()
@@ -323,42 +271,42 @@ endfunction
 
 function! s:Gdev() abort
     let worktree = Cd2Worktree()
-    call asyncrun#run('<bang>', '', '~/loadrc/gitrc/gdev.sh')
+    call RunShell('~/loadrc/gitrc/gdev.sh', '', '', '')
 endfunction
 
 function! s:Hdi() abort
     let worktree = Cd2Worktree()
-    let output = 'hdi.diff'
+    let b:output = 'hdi.diff'
 
-    silent exec '!~/loadrc/hgrc/hdi.sh' . ' HEAD 2>&1 | tee ' . '"' .  output . '"'
+    call RunShell('~/loadrc/hgrc/hdi.sh', '', b:output, '')
 
-    if bufwinnr('^' . output . '$') > 0
-        exe "bd!" . output
+    if bufwinnr('^' . b:output . '$') > 0
+        exe "bd!" . b:output
     endif
 
-    call OpenOrSwitch(output, 'vs')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:Gdi(...) abort
     let worktree = Cd2Worktree()
     let arg1 = (a:0 >= 1) ? a:1 : ''
-    let output = 'gdi.diff'
+    let b:output = 'gdi.diff'
 
     if expand('%:t') != 'index'
-        let output = expand('%:t') . '.diff'
+        let b:output = expand('%:t') . '.diff'
 
         if a:0 == 0
-            silent exec '!~/loadrc/gitrc/gdi.sh ' . 'HEAD "' .  expand('%:p') . '" 2>&1 | tee ' . '"' .  output . '"'
+            silent exec '!~/loadrc/gitrc/gdi.sh ' . 'HEAD "' .  expand('%:p') . '" 2>&1 | tee ' . '"' .  b:output . '"'
         else
             let arg1 = (a:0 >= 1) ? a:1 : ''
-            silent exec '!~/loadrc/gitrc/gdi.sh ' . '"' .  arg1 . '" "' .  expand('%:p') . '" 2>&1 | tee ' . '"' .  output . '"'
+            silent exec '!~/loadrc/gitrc/gdi.sh ' . '"' .  arg1 . '" "' .  expand('%:p') . '" 2>&1 | tee ' . '"' .  b:output . '"'
         endif
     else
         let arg1 = (a:0 >= 1) ? a:1 : ''
-        silent exec '!~/loadrc/gitrc/gdi.sh ' . '"' .  arg1 . '" HEAD 2>&1 | tee ' . '"' .  output . '"'
+        silent exec '!~/loadrc/gitrc/gdi.sh ' . '"' .  arg1 . '" HEAD 2>&1 | tee ' . '"' .  b:output . '"'
     endif
 
-    if bufwinnr('^' . output . '$') > 0
+    if bufwinnr('^' . b:output . '$') > 0
         exe "bd!" . output
     endif
 
@@ -370,11 +318,11 @@ endfunction
 function! s:Gdit() abort
     let worktree = Cd2Worktree()
     let current_branch = substitute(system("~/loadrc/gitrc/get_current_branch.sh"), '\n', '', '')
-    let output = current_branch . '.gdit.diff'
-    let output = substitute(output, "/", "_", "g")
-    exec '!~/loadrc/gitrc/gdit.sh' . ' ' . '"' .  output . '"'
+    let b:output = current_branch . '.gdit.diff'
+    let b:output = substitute(output, "/", "_", "g")
+    exec '!~/loadrc/gitrc/gdit.sh' . ' ' . '"' .  b:output . '"'
 
-    if bufwinnr('^' . output . '$') > 0
+    if bufwinnr('^' . b:output . '$') > 0
         exe "bd!" . output
     endif
 
@@ -387,11 +335,11 @@ function! s:Gdio(...) abort
     let worktree = Cd2Worktree()
     let current_branch = substitute(system("~/loadrc/gitrc/get_current_branch.sh"), '\n', '', '')
     let local_branch = (a:0 >= 1) ? a:1 : current_branch
-    let output = local_branch . '.gdio.diff'
-    let output = substitute(output, "/", "_", "g")
+    let b:output = local_branch . '.gdio.diff'
+    let b:output = substitute(output, "/", "_", "g")
     exec '!~/loadrc/gitrc/gdio.sh'
 
-    if bufwinnr('^' . output . '$') > 0
+    if bufwinnr('^' . b:output . '$') > 0
         exe "bd!" . output
     endif
 
@@ -405,9 +353,9 @@ function! s:Gdi2(...) abort
     endif
 
     let worktree = Cd2Worktree()
-    let output = 'gdi2.findresult'
+    let b:output = 'gdi2.findresult'
     let arg1 = (a:0 >= 1) ? a:1 : ''
-    exec '!~/loadrc/gitrc/gdi2.sh 2>&1 | tee ' . '"' .  output . '"'
+    exec '!~/loadrc/gitrc/gdi2.sh 2>&1 | tee ' . '"' .  b:output . '"'
     call OpenOrSwitch(output, 'vs')
 endfunction
 
@@ -503,7 +451,7 @@ endfunction
 
 function! s:Gshow(args, ...) abort
     let worktree = Cd2Worktree()
-    let output = a:args . '.diff'
+    let b:output = a:args . '.diff'
     silent exec '!~/loadrc/gitrc/gshow.sh ' . '"' .  a:args . '" 2>&1 | tee ' . output
     call OpenOrSwitch(output, 'vs')
 endfunction
@@ -516,14 +464,9 @@ function! s:Copy(...) abort
 endfunction
 
 function! s:CatPlay(...) abort
-    if &modified
-        echom 'Please check and save your file first!!!'
-        return 0
-    endif
-
     call asyncrun#stop('<bang>')
     let b:output = expand("%:p") . '.runresult'
-    call asyncrun#run('<bang>', '', '~/loadrc/vishrc/cat_play.sh ' . '"' . expand("%:p") . '"' . ' 2>&1 | tee ' . b:output)
+    call RunShell('~/loadrc/vishrc/cat_play.sh', expand("%:p"), b:output, 'true')
     call OpenOrSwitch(b:output, 'vs')
 endfunction
 
@@ -539,24 +482,14 @@ function! s:CatMove(...) abort
 endfunction
 
 function! s:CatDu(...) abort
-    if &modified
-        echom 'Please check and save your file first!!!'
-        return 0
-    endif
-
     let b:output = expand("%:p") . '.runresult'
-    call RunShell('~/loadrc/vishrc/cat_du.sh', expand("%:p"), b:output)
+    call RunShell('~/loadrc/vishrc/cat_du.sh', expand("%:p"), b:output, 'true') 
     call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:CatRun(...) abort
-    if &modified
-        echom 'Please check and save your file first!!!'
-        return 0
-    endif
-
     let b:output = expand("%:p") . '.runresult'
-    call RunShell('~/loadrc/vishrc/cat_run.sh', expand("%:p"), b:output)
+    call RunShell('~/loadrc/vishrc/cat_run.sh', expand("%:p"), b:output, 'true') 
     call OpenOrSwitch(b:output, 'vs')
 endfunction
 
@@ -566,8 +499,9 @@ endfunction
 
 function! s:Dps() abort
     let worktree = Cd2Worktree()
-    silent exec '!~/loadrc/dockerrc/dps.sh'
-    call OpenOrSwitch('dps.findresult', 'vs')
+    let b:output = 'dps.findresult'
+    call RunShell('~/loadrc/dockerrc/dps.sh', '', b:output, '')
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! s:SvnUp() abort
diff --git a/vimrc/.vim/plugin/keymap.vim b/vimrc/.vim/plugin/keymap.vim
index fcfe1713..c6285abb 100644
--- ./vimrc/.vim/plugin/keymap.vim
+++ ./vimrc/.vim/plugin/keymap.vim
@@ -110,7 +110,7 @@ function! VDebug()
 
     let b:csdbpath = Cd2ProjectRoot("files.proj")
     let b:output = b:csdbpath . '/' . b:file_name . '.runresult'
-    call RunShell('~/loadrc/vishrc/vdebug.sh', b:to_run, b:output)
+    call RunShell('~/loadrc/vishrc/vdebug.sh', b:to_run, b:output, 'true') 
 
     if b:to_run != 'gbil.log'
         call OpenOrSwitch(b:output, 'vs')
@@ -139,7 +139,7 @@ function! VRun()
 
     let b:csdbpath = Cd2ProjectRoot("files.proj")
     let b:output = b:csdbpath . '/' . b:file_name . '.runresult'
-    call RunShell('~/loadrc/vishrc/vrun.sh', b:to_run, b:output)
+    call RunShell('~/loadrc/vishrc/vrun.sh', b:to_run, b:output, 'true') 
 
     if b:to_run != 'gbil.log'
         call OpenOrSwitch(b:output, 'vs')
@@ -163,9 +163,9 @@ function! GetFirstColumnOfFile()
         return 0
     endif
 
-    let bak_file = substitute(system('~/loadrc/bashrc/get_first_column_of_file.sh ' . '"' .  expand("%:p") . '"'), '\n', '', '')
-    silent exec '!~/loadrc/bashrc/get_first_column_of_file.sh ' . '"' .  expand("%:p") . '"'
-    call OpenOrSwitch(expand("%:p") . '.bak', 'vs')
+    let b:output = expand("%:p") . '.bak'
+    call RunShell('~/loadrc/bashrc/get_first_column_of_file.sh', expand("%:p"), b:output, '') 
+    call OpenOrSwitch(b:output, 'vs')
 endfunction
 
 function! CSCSearch(num)
